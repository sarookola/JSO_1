/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JSO.Com.Main;

import JSO.Com.DataBox_cutom.FileManipulat;
import JSO.Com.Communicate.Server;
import JSO.Com.ControllPanels.Controll;
import JSO.Com.DataBox.ControolPack;
import JSO.Com.DataBox.DataPackSettingsdrawingDimsList;
import JSO.Com.DataBox.Pack;
import JSO.Com.DataBox.SettingPack;

import JSO.Com.Render.base.DrawSettingDims;
import JSO.Com.Render.base.DrawSettingS;
import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author shayan
 */
public class Settings extends javax.swing.JPanel implements SettingInterface {

    // display1.Display_Frame out[];
    private final Server server;
    SettingPack settings;
    String settingfilesave = "Seting//DefaultSetting", settingfile = "Seting\\DefaultSetting0.json";
    String jsonsavefile = "Seting//jsonffile.json";
    int markCurrent, markTotal;
//    TimerTimer timer;
    int onLeter;
    int curentDimsListIndex;
    DimsPanel dimsPanel;
    boolean loadsetting = true, Dimcallupdate = false;
    int settingcode;
    boolean newsha = false;
    Controll controll;
    ControolPack controolPack;
//    private JTextField jt[];

    /**
     * Creates new form Settings
     */
    public Settings(Server server) {
//        settings = new SettingPack();
//        loadsetting(settingfile);
        loadsetting = true;
        this.server = server;
        initComponents();
        loadsetting(settingfile);
        dimsPanel = new DimsPanel(settings, this);
        jPanelDims.add(dimsPanel);
        controll = new Controll(server);
        controolPack = controll.getControolPack();
        init2();
//        initAllsettings();

//        jt = new JTextField[20];
//        for (int i = 0; i < 20; i++) {
//            jt[i] = new JTextField("?");
//            jt[i].setFont2(new java.awt.Font("Tahoma", 0, 24));
//
//        }
        jTabbedPane2.add(" play test ", controll);
        loadsetting = false;
        newsha = true;
        jComboBoxItems.setSelectedIndex(settings.getSelectedItem());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanelDims = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jComboBoxItems = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jComboBoxLinkItem = new javax.swing.JComboBox();
        jPanel15 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jCheckBoxtextVis = new javax.swing.JCheckBox();
        jCheckBoximageVis = new javax.swing.JCheckBox();
        jButton15 = new javax.swing.JButton();
        jSpinnerCOPYN = new javax.swing.JSpinner();
        jPanel25 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerx2 = new javax.swing.JSpinner();
        jPanel21 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSpinnerx3 = new javax.swing.JSpinner();
        jPanel26 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jSpinnerx4 = new javax.swing.JSpinner();
        jPanel23 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerx5 = new javax.swing.JSpinner();
        jSpinnery5 = new javax.swing.JSpinner();
        jSpinnerz5 = new javax.swing.JSpinner();
        jPanel36 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jSpinnerScalex1 = new javax.swing.JSpinner();
        jSpinnerScaley1 = new javax.swing.JSpinner();
        jSpinnerScalez1 = new javax.swing.JSpinner();
        jPanel37 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jSpinnerAnglex1 = new javax.swing.JSpinner();
        jSpinnerAngley1 = new javax.swing.JSpinner();
        jSpinnerAnglez = new javax.swing.JSpinner();
        jPanel24 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jButton20 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel38 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jPanelState1 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jSpinnerx = new javax.swing.JSpinner();
        jSpinnery = new javax.swing.JSpinner();
        jPanel32 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jSpinnerScalex = new javax.swing.JSpinner();
        jSpinnerScaley = new javax.swing.JSpinner();
        jPanel29 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jButtonColor = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jComboBoxFonts = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jSliderStrok = new javax.swing.JSlider();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerSeetingCODE = new javax.swing.JSpinner();
        jPanel39 = new javax.swing.JPanel();
        jPanelCamera = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jSpinnerx6 = new javax.swing.JSpinner();
        jSpinnery6 = new javax.swing.JSpinner();
        jSpinnerz6 = new javax.swing.JSpinner();
        jPanel46 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jSpinnerScalex3 = new javax.swing.JSpinner();
        jSpinnerScaley3 = new javax.swing.JSpinner();
        jSpinnerScalez3 = new javax.swing.JSpinner();
        jPanel47 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jSpinnerAnglex2 = new javax.swing.JSpinner();
        jSpinnerAngley2 = new javax.swing.JSpinner();
        jSpinnerAnglez2 = new javax.swing.JSpinner();
        jPanel48 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jSpinnercam_1 = new javax.swing.JSpinner();
        jSpinnercam_2 = new javax.swing.JSpinner();
        jPanel49 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jSpinnercam_3 = new javax.swing.JSpinner();
        jSpinnercam_4 = new javax.swing.JSpinner();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setPreferredSize(new java.awt.Dimension(200, 75));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jButton12.setText("update All");
        jButton12.setMinimumSize(new java.awt.Dimension(30, 23));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton12, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel2);

        jPanel19.setLayout(new java.awt.GridLayout(3, 2));

        jButton1.setText("Save  As");
        jButton1.setMinimumSize(new java.awt.Dimension(30, 10));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton1);

        jButton2.setText("initSetting");
        jButton2.setMinimumSize(new java.awt.Dimension(30, 10));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton2);

        jButton19.setText("load setting");
        jButton19.setMinimumSize(new java.awt.Dimension(30, 10));
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton19);

        jButton24.setText("semdsettingfile");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton24);

        jButton11.setText("update");
        jButton11.setMinimumSize(new java.awt.Dimension(30, 23));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton11);

        jPanel41.setLayout(new java.awt.GridLayout(1, 0));

        jButton7.setText("resetId");
        jButton7.setMinimumSize(new java.awt.Dimension(30, 10));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel41.add(jButton7);

        jButton5.setText("HideALL");
        jButton5.setMinimumSize(new java.awt.Dimension(30, 10));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel41.add(jButton5);

        jPanel19.add(jPanel41);

        jPanel3.add(jPanel19);

        jPanel5.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanelDims.setLayout(new java.awt.GridLayout(1, 0));
        jPanel4.add(jPanelDims, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.GridLayout(1, 1));

        jComboBoxItems.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxItems.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxItemsItemStateChanged(evt);
            }
        });
        jComboBoxItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBoxItems, 0, 252, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jComboBoxItems, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel8.add(jPanel13);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jComboBoxLinkItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxLinkItem.setMinimumSize(new java.awt.Dimension(36, 20));
        jComboBoxLinkItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLinkItemActionPerformed(evt);
            }
        });
        jPanel6.add(jComboBoxLinkItem, java.awt.BorderLayout.CENTER);

        jPanel15.setPreferredSize(new java.awt.Dimension(80, 10));
        jPanel15.setLayout(new java.awt.GridLayout(1, 0));
        jPanel15.add(jSpinner1);

        jLabel1.setText("Link to");
        jPanel15.add(jLabel1);

        jPanel6.add(jPanel15, java.awt.BorderLayout.WEST);

        jPanel8.add(jPanel6);

        jPanel4.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel16.setLayout(new java.awt.GridLayout(1, 0));

        jPanel18.setLayout(new java.awt.GridLayout(4, 0));
        jPanel16.add(jPanel18);

        jPanel22.setLayout(new java.awt.GridLayout(1, 0));

        jPanel17.setLayout(new java.awt.GridLayout(0, 1));

        jPanel27.setLayout(new java.awt.GridLayout(1, 0));

        jCheckBoxtextVis.setText("Textvis");
        jPanel27.add(jCheckBoxtextVis);

        jCheckBoximageVis.setText("ImagVis");
        jPanel27.add(jCheckBoximageVis);

        jPanel17.add(jPanel27);

        jButton15.setText("copy n");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel17.add(jButton15);

        jSpinnerCOPYN.setModel(new javax.swing.SpinnerNumberModel(2, null, null, 1));
        jSpinnerCOPYN.setMinimumSize(new java.awt.Dimension(10, 20));
        jPanel17.add(jSpinnerCOPYN);

        jPanel22.add(jPanel17);

        jPanel25.setLayout(new java.awt.GridLayout(0, 1));

        jPanel20.setLayout(new java.awt.GridLayout(1, 0));

        jLabel4.setText("x2");
        jPanel20.add(jLabel4);

        jSpinnerx2.setModel(new javax.swing.SpinnerNumberModel(2, null, null, 1));
        jSpinnerx2.setMinimumSize(new java.awt.Dimension(10, 20));
        jPanel20.add(jSpinnerx2);

        jPanel25.add(jPanel20);

        jPanel21.setLayout(new java.awt.GridLayout(1, 0));

        jLabel5.setText("x3");
        jPanel21.add(jLabel5);

        jSpinnerx3.setModel(new javax.swing.SpinnerNumberModel(1, null, null, 1));
        jSpinnerx3.setMinimumSize(new java.awt.Dimension(10, 20));
        jPanel21.add(jSpinnerx3);

        jPanel25.add(jPanel21);

        jPanel26.setLayout(new java.awt.GridLayout(1, 0));

        jLabel10.setText("x4");
        jPanel26.add(jLabel10);

        jSpinnerx4.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerx4.setMinimumSize(new java.awt.Dimension(10, 20));
        jPanel26.add(jSpinnerx4);

        jPanel25.add(jPanel26);

        jPanel22.add(jPanel25);

        jPanel16.add(jPanel22);

        jPanel4.add(jPanel16, java.awt.BorderLayout.PAGE_END);

        jPanel23.setLayout(new java.awt.GridLayout(0, 1));

        jPanel33.setLayout(new java.awt.GridLayout(1, 0));

        jPanel35.setLayout(new java.awt.GridLayout(0, 1));

        jLabel3.setText("Position");
        jPanel35.add(jLabel3);

        jSpinnerx5.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jPanel35.add(jSpinnerx5);

        jSpinnery5.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jPanel35.add(jSpinnery5);

        jSpinnerz5.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jPanel35.add(jSpinnerz5);

        jPanel33.add(jPanel35);

        jPanel36.setLayout(new java.awt.GridLayout(0, 1));

        jLabel12.setText("scale");
        jPanel36.add(jLabel12);

        jSpinnerScalex1.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jPanel36.add(jSpinnerScalex1);

        jSpinnerScaley1.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jPanel36.add(jSpinnerScaley1);

        jSpinnerScalez1.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jPanel36.add(jSpinnerScalez1);

        jPanel33.add(jPanel36);

        jPanel37.setLayout(new java.awt.GridLayout(0, 1));

        jLabel13.setText("Angle");
        jPanel37.add(jLabel13);

        jSpinnerAnglex1.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jPanel37.add(jSpinnerAnglex1);

        jSpinnerAngley1.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jPanel37.add(jSpinnerAngley1);

        jSpinnerAnglez.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jPanel37.add(jSpinnerAnglez);

        jPanel33.add(jPanel37);

        jPanel23.add(jPanel33);

        jPanel24.setLayout(new java.awt.GridLayout(0, 1));

        jPanel34.setLayout(new java.awt.GridLayout(0, 1));

        jButton20.setText("add to all");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel34.add(jButton20);

        jButton6.setText("copy n +adjust + frame1-0");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel34.add(jButton6);

        jPanel24.add(jPanel34);

        jPanel38.setLayout(new java.awt.GridLayout(1, 0));

        jButton3.setText("lineSpacing");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton3);

        jPanel24.add(jPanel38);

        jPanel23.add(jPanel24);

        jPanel4.add(jPanel23, java.awt.BorderLayout.EAST);

        jTabbedPane1.addTab("objects - image - text ..", jPanel4);

        jPanel9.setLayout(new java.awt.GridLayout(0, 1));

        jPanel40.setLayout(new java.awt.GridLayout(0, 1));

        jPanel30.setLayout(new java.awt.GridLayout(1, 0));

        jPanelState1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel31.setLayout(new java.awt.GridLayout(0, 1));

        jLabel11.setText("screen position");
        jPanel31.add(jLabel11);

        jSpinnerx.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerxStateChanged(evt);
            }
        });
        jPanel31.add(jSpinnerx);

        jSpinnery.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnery.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinneryStateChanged(evt);
            }
        });
        jPanel31.add(jSpinnery);

        jPanelState1.add(jPanel31);

        jPanel32.setLayout(new java.awt.GridLayout(0, 1));

        jLabel14.setText("Screen size");
        jPanel32.add(jLabel14);

        jSpinnerScalex.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinnerScalex.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScalexStateChanged(evt);
            }
        });
        jPanel32.add(jSpinnerScalex);

        jSpinnerScaley.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinnerScaley.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScaleyStateChanged(evt);
            }
        });
        jPanel32.add(jSpinnerScaley);

        jPanelState1.add(jPanel32);

        jPanel30.add(jPanelState1);

        jPanel29.setLayout(new java.awt.GridLayout(1, 0));

        jPanel28.setLayout(new java.awt.GridLayout(1, 0));

        jButtonColor.setText("backgraound");
        jButtonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorActionPerformed(evt);
            }
        });
        jPanel28.add(jButtonColor);

        jPanel29.add(jPanel28);

        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jPanel10.setLayout(new java.awt.GridLayout(0, 1));

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        jComboBoxFonts.setModel(new javax.swing.DefaultComboBoxModel(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
        jComboBoxFonts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxFontsMouseClicked(evt);
            }
        });
        jComboBoxFonts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxFontsKeyPressed(evt);
            }
        });
        jPanel11.add(jComboBoxFonts);

        jPanel10.add(jPanel11);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jSliderStrok.setMaximum(20);
        jSliderStrok.setValue(2);
        jPanel12.add(jSliderStrok);

        jPanel10.add(jPanel12);

        jPanel14.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setText("Setting Code");
        jLabel2.setMinimumSize(new java.awt.Dimension(30, 10));
        jPanel14.add(jLabel2);

        jSpinnerSeetingCODE.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerSeetingCODEStateChanged(evt);
            }
        });
        jPanel14.add(jSpinnerSeetingCODE);

        jPanel10.add(jPanel14);

        jPanel7.add(jPanel10);

        jPanel29.add(jPanel7);

        jPanel30.add(jPanel29);

        jPanel40.add(jPanel30);

        jPanel39.setLayout(new java.awt.GridLayout(1, 0));
        jPanel40.add(jPanel39);

        jPanel9.add(jPanel40);

        jPanelCamera.setLayout(new java.awt.GridLayout(1, 0));

        jPanel44.setLayout(new java.awt.GridLayout(1, 0));

        jPanel45.setLayout(new java.awt.GridLayout(0, 1));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Position");
        jPanel45.add(jLabel9);

        jSpinnerx6.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnerx6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerx6StateChanged(evt);
            }
        });
        jPanel45.add(jSpinnerx6);

        jSpinnery6.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnery6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnery6StateChanged(evt);
            }
        });
        jPanel45.add(jSpinnery6);

        jSpinnerz6.setModel(new javax.swing.SpinnerNumberModel(1000.0f, null, null, 0.1f));
        jSpinnerz6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerz6StateChanged(evt);
            }
        });
        jPanel45.add(jSpinnerz6);

        jPanel44.add(jPanel45);

        jPanel46.setLayout(new java.awt.GridLayout(0, 1));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("look at");
        jPanel46.add(jLabel15);

        jSpinnerScalex3.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jSpinnerScalex3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScalex3StateChanged(evt);
            }
        });
        jPanel46.add(jSpinnerScalex3);

        jSpinnerScaley3.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jSpinnerScaley3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScaley3StateChanged(evt);
            }
        });
        jPanel46.add(jSpinnerScaley3);

        jSpinnerScalez3.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jSpinnerScalez3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerScalez3StateChanged(evt);
            }
        });
        jPanel46.add(jSpinnerScalez3);

        jPanel44.add(jPanel46);

        jPanel47.setLayout(new java.awt.GridLayout(0, 1));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("up");
        jPanel47.add(jLabel16);

        jSpinnerAnglex2.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnerAnglex2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerAnglex2StateChanged(evt);
            }
        });
        jPanel47.add(jSpinnerAnglex2);

        jSpinnerAngley2.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        jSpinnerAngley2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerAngley2StateChanged(evt);
            }
        });
        jPanel47.add(jSpinnerAngley2);

        jSpinnerAnglez2.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnerAnglez2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerAnglez2StateChanged(evt);
            }
        });
        jPanel47.add(jSpinnerAnglez2);

        jPanel44.add(jPanel47);

        jPanel48.setLayout(new java.awt.GridLayout(0, 1));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("fov/aspect");
        jPanel48.add(jLabel17);

        jSpinnercam_1.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnercam_1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnercam_1StateChanged(evt);
            }
        });
        jPanel48.add(jSpinnercam_1);

        jSpinnercam_2.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnercam_2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnercam_2StateChanged(evt);
            }
        });
        jPanel48.add(jSpinnercam_2);

        jPanel44.add(jPanel48);

        jPanel49.setLayout(new java.awt.GridLayout(0, 1));

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("near / far");
        jPanel49.add(jLabel18);

        jSpinnercam_3.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnercam_3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnercam_3StateChanged(evt);
            }
        });
        jPanel49.add(jSpinnercam_3);

        jSpinnercam_4.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        jSpinnercam_4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnercam_4StateChanged(evt);
            }
        });
        jPanel49.add(jSpinnercam_4);

        jPanel44.add(jPanel49);

        jPanelCamera.add(jPanel44);

        jPanel9.add(jPanelCamera);

        jTabbedPane1.addTab("background size and color", jPanel9);

        jPanel5.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("Primary setting", jPanel5);

        add(jTabbedPane2);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(null, "Choose a Color", jButtonColor.getForeground());
        if (c != null) {
            jButtonColor.setForeground(c);
            settingupdate();
        }
    }//GEN-LAST:event_jButtonColorActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        dimupdateSetting();

    }//GEN-LAST:event_jButton11ActionPerformed

    private void jComboBoxFontsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxFontsMouseClicked
        // TODO add your handling code here:
        settingupdate();
    }//GEN-LAST:event_jComboBoxFontsMouseClicked

    private void jComboBoxFontsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxFontsKeyPressed
        // TODO add your handling code here:
        settingupdate();
    }//GEN-LAST:event_jComboBoxFontsKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        savesettingAs();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        initAllsettings();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jSpinnerSeetingCODEStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerSeetingCODEStateChanged
        // TODO add your handling code here:
        if (!loadsetting) {

            String st = JOptionPane.showInputDialog("input new Setting code");

            if ((st != null) && (!st.equals(""))) {
                settingcode = Integer.parseInt(st);
            }
            jSpinnerSeetingCODE.setValue(settingcode);
        }
    }//GEN-LAST:event_jSpinnerSeetingCODEStateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        hideallTextandImages();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        copyn_dx_frame();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        copy_n(Integer.parseInt(jSpinnerCOPYN.getValue().toString()));
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
        addnumberstocurrentalldims();
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
        dimupdateSetting();
//          Gson gson = new Gson();
//         String rrrr = gson.toJson(settings);
//        System.out.println(" \trrr="+rrrr);
//        server.writeSocket(rrrr);

    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // TODO add your handling code here:
        loadfromsetting();
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jComboBoxLinkItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLinkItemActionPerformed
        // TODO add your handling code here:
        if (newsha) {
            linkSet(jComboBoxLinkItem.getSelectedIndex());
        }
    }//GEN-LAST:event_jComboBoxLinkItemActionPerformed

    private void jSpinnerScaleyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScaleyStateChanged
        // TODO add your handling code here:
        updatescreen(true);
    }//GEN-LAST:event_jSpinnerScaleyStateChanged

    private void jSpinnerScalexStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScalexStateChanged
        // TODO add your handling code here:
        updatescreen(true);
    }//GEN-LAST:event_jSpinnerScalexStateChanged

    private void jSpinneryStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinneryStateChanged
        // TODO add your handling code here:
        updatescreen(true);
    }//GEN-LAST:event_jSpinneryStateChanged

    private void jSpinnerxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerxStateChanged
        // TODO add your handling cod here:
        updatescreen(true);
    }//GEN-LAST:event_jSpinnerxStateChanged

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        dimupdateSettingAll();
//        checkvisibility();
//        controll.SendControolPack();
//        ControolPack      controolPack ;
        // controolPack = new FileManipulat().loadControlData(controll.getLastontrolDataFile());
//        controll.SendControolPackOld();
 initAllsettings();
        saveSetting(settingfilesave);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jSpinnerx6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerx6StateChanged
        // TODO add your handling code here:
        updateCamera(true);
    }//GEN-LAST:event_jSpinnerx6StateChanged

    private void jSpinnery6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnery6StateChanged
        // TODO add your handling code here:
        updateCamera(true);
    }//GEN-LAST:event_jSpinnery6StateChanged

    private void jSpinnerz6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerz6StateChanged
        // TODO add your handling code here:
        updateCamera(true);
    }//GEN-LAST:event_jSpinnerz6StateChanged

    private void jSpinnerScalex3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScalex3StateChanged
        // TODO add your handling code here:
        updateCamera(true);
    }//GEN-LAST:event_jSpinnerScalex3StateChanged

    private void jSpinnerScaley3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScaley3StateChanged
        // TODO add your handling code here:
        updateCamera(true);
    }//GEN-LAST:event_jSpinnerScaley3StateChanged

    private void jSpinnerScalez3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerScalez3StateChanged
        updateCamera(true);    // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerScalez3StateChanged

    private void jSpinnerAnglex2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerAnglex2StateChanged
        updateCamera(true);    // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerAnglex2StateChanged

    private void jSpinnerAngley2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerAngley2StateChanged
        updateCamera(true);    // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerAngley2StateChanged

    private void jSpinnerAnglez2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerAnglez2StateChanged
        updateCamera(true);    // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerAnglez2StateChanged

    private void jSpinnercam_1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnercam_1StateChanged
        updateCamera(true);      // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnercam_1StateChanged

    private void jSpinnercam_2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnercam_2StateChanged
        updateCamera(true);       // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnercam_2StateChanged

    private void jSpinnercam_3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnercam_3StateChanged
        updateCamera(true);      // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnercam_3StateChanged

    private void jSpinnercam_4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnercam_4StateChanged
        updateCamera(true);     // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnercam_4StateChanged

    private void jComboBoxItemsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxItemsItemStateChanged
        // TODO add your handling code here:
//        fgvfg
    }//GEN-LAST:event_jComboBoxItemsItemStateChanged

    private void jComboBoxItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxItemsActionPerformed
        // TODO add your handling code here:
        if (newsha) {
            reSelectItem();
        }
    }//GEN-LAST:event_jComboBoxItemsActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        resetId();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       repairLineSpacing();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonColor;
    private javax.swing.JCheckBox jCheckBoximageVis;
    private javax.swing.JCheckBox jCheckBoxtextVis;
    private javax.swing.JComboBox jComboBoxFonts;
    private javax.swing.JComboBox jComboBoxItems;
    private javax.swing.JComboBox jComboBoxLinkItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelCamera;
    private javax.swing.JPanel jPanelDims;
    private javax.swing.JPanel jPanelState1;
    private javax.swing.JSlider jSliderStrok;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinnerAnglex1;
    private javax.swing.JSpinner jSpinnerAnglex2;
    private javax.swing.JSpinner jSpinnerAngley1;
    private javax.swing.JSpinner jSpinnerAngley2;
    private javax.swing.JSpinner jSpinnerAnglez;
    private javax.swing.JSpinner jSpinnerAnglez2;
    private javax.swing.JSpinner jSpinnerCOPYN;
    protected javax.swing.JSpinner jSpinnerScalex;
    private javax.swing.JSpinner jSpinnerScalex1;
    private javax.swing.JSpinner jSpinnerScalex3;
    protected javax.swing.JSpinner jSpinnerScaley;
    private javax.swing.JSpinner jSpinnerScaley1;
    private javax.swing.JSpinner jSpinnerScaley3;
    private javax.swing.JSpinner jSpinnerScalez1;
    private javax.swing.JSpinner jSpinnerScalez3;
    private javax.swing.JSpinner jSpinnerSeetingCODE;
    private javax.swing.JSpinner jSpinnercam_1;
    private javax.swing.JSpinner jSpinnercam_2;
    private javax.swing.JSpinner jSpinnercam_3;
    private javax.swing.JSpinner jSpinnercam_4;
    protected javax.swing.JSpinner jSpinnerx;
    private javax.swing.JSpinner jSpinnerx2;
    private javax.swing.JSpinner jSpinnerx3;
    private javax.swing.JSpinner jSpinnerx4;
    private javax.swing.JSpinner jSpinnerx5;
    private javax.swing.JSpinner jSpinnerx6;
    protected javax.swing.JSpinner jSpinnery;
    private javax.swing.JSpinner jSpinnery5;
    private javax.swing.JSpinner jSpinnery6;
    private javax.swing.JSpinner jSpinnerz5;
    private javax.swing.JSpinner jSpinnerz6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables

    private void init2() {
//        loadsetting = true;

        init1();
        dimsPanel.setSettingPack(settings);
        updateSetting();
//        loadsetting = false;
        jComboBoxItems.setSelectedIndex(settings.getSelectedItem());
//        loadsetting = false;

    }

    private void init1() {
        jComboBoxFonts.setModel(new javax.swing.DefaultComboBoxModel(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
//        System.out.println("setting.get"+settings.getSelectedItem());
//        jComboBoxItems.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jComboBoxItemsActionPerformed(evt);
//            }
//        });
//        jComboBoxLinkItem.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jComboBoxLinkItemActionPerformed(evt);
//            }
//        });

        comboResets();

    }

    private void settingupdate() {

        settings.setBackcolor(jButtonColor.getForeground());
        settings.setFont(jComboBoxFonts.getSelectedItem().toString());
        settings.setStrok(jSliderStrok.getValue());
        settings.setSeetingCode(Integer.parseInt(jSpinnerSeetingCODE.getValue().toString()));
//        System.out.println("update w="+settings.getDrawinGObjectses()[0].getDrawinGObject()[0].getWidthRelative());
        sendSetting(settings);
//        Gson gson = new Gson();
//        String rrrr = gson.toJson(settings);
//        new FileManipulat().saveString(jsonsavefile, rrrr);
//        server.writeSocket(rrrr);
    }

    private void saveSetting(String st) {
        for (int i = 0; i < st.length(); i++) {
            if (st.charAt(i) == '.') {
                st = st.substring(0, i);
                i = st.length();
            }

        }
        new FileManipulat().saveObject(st + settings.getSeetingCode() + ".json", settings);
    }

    private void loadsetting(String st) {

//        if (new Date().getMonth() > 10) {
//            settings = new SettingPack(server.getobjecsArrayLenght());
//            saveSetting(settingfilesave);
//        } else {
        settings = new FileManipulat().loadSetting(st);
//        }

        settings.setActiveDimState(0);
        settings.setActiveDimIndex(0);
        settings.setSelectedItem(0);
        settingcode = settings.getSeetingCode();
        jSpinnerSeetingCODE.setValue(settingcode);
        jSliderStrok.setValue(settings.getStrok());
        jButtonColor.setForeground(settings.getBackcolor());
        jComboBoxFonts.setSelectedItem(settings.getFont());
        jComboBoxItems.setSelectedIndex(settings.getSelectedItem());
    }

    private void updateSetting() {

        jSliderStrok.setValue(settings.getStrok());
        jButtonColor.setForeground(settings.getBackcolor());
        jComboBoxFonts.setSelectedItem(settings.getFont());
        jComboBoxItems.setSelectedIndex(settings.getSelectedItem());
        jSpinnerSeetingCODE.setValue(settings.getSeetingCode());

        jSpinnerx.setValue(settings.getScreenDim()[0]);
        jSpinnery.setValue(settings.getScreenDim()[1]);
        jSpinnerScalex.setValue(settings.getScreenDim()[2]);
        jSpinnerScaley.setValue(settings.getScreenDim()[3]);

        jSpinnerx6.setValue(settings.getCamera()[0]);
        jSpinnery6.setValue(settings.getCamera()[1]);
        jSpinnerz6.setValue(settings.getCamera()[2]);
        jSpinnerScalex3.setValue(settings.getCamera()[3]);
        jSpinnerScaley3.setValue(settings.getCamera()[4]);
        jSpinnerScalez3.setValue(settings.getCamera()[5]);
        jSpinnerAnglex2.setValue(settings.getCamera()[6]);
        jSpinnerAngley2.setValue(settings.getCamera()[7]);
        jSpinnerAnglez2.setValue(settings.getCamera()[8]);

        jSpinnercam_1.setValue(settings.getCamera()[9]);
        jSpinnercam_2.setValue(settings.getCamera()[10]);
        jSpinnercam_3.setValue(settings.getCamera()[11]);
        jSpinnercam_4.setValue(settings.getCamera()[12]);

        sendSetting(settings);

        jPanelDims.updateUI();

        jComboBoxFonts.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFontsItemStateChanged(evt);
            }
        });
        jSliderStrok.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStrokStateChanged(evt);
            }
        });

    }

    private void jSliderStrokStateChanged(javax.swing.event.ChangeEvent evt) {
        settingupdate();
    }

    private void jComboBoxFontsItemStateChanged(java.awt.event.ItemEvent evt) {
        settingupdate();
    }

    @Override
    public void dimupdateSetting() {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            updateSettingFromDimAll();
            updateSettingFromDim();

            Dimcallupdate = false;
//            sendSetting(settings);
            saveSetting(settingfilesave);
        }
    }

    public void dimupdateSettingAll() {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            updateSettingFromDimAll();
//            settingupdate();
            Dimcallupdate = false;
//            sendSetting(settings);
        }
    }

    @Override
    public boolean dimLess(int selectedDimsListIndex) {
        boolean ret = false;
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            if (settings.getDrawSettingS(x).getDrawingDimsList().size() > 1 && selectedDimsListIndex < settings.getDrawSettingS(x).getDrawingDimsList().size()) {
                settings.getDrawSettingS(x).getDrawingDimsList().remove(selectedDimsListIndex);
                dimsPanel.setcombo(settings.getDrawSettingS(x).getDrawingDimsList());
                sendSetting(settings);
                ret = true;
            }
            Dimcallupdate = false;
        }
        return ret;
    }

    @Override
    public void dimSadd(int selectedIndex, int selectedDim) {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            curentDimsListIndex = selectedIndex;
//            System.out.println("990209 - x="+x+"\tcurentDimsListIndex="+curentDimsListIndex);

            DrawSettingDims test[] = new DrawSettingDims[1];
            test[0] = new DrawSettingDims();
            test[0].setDim(settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[selectedDim].getDim());
            test[0].setTextC(settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[selectedDim].getTextC());
            settings.getDrawSettingS(x).getDrawingDimsList().add(curentDimsListIndex + 1, test);
            dimsPanel.setcombo(settings.getDrawSettingS(x).getDrawingDimsList());
            sendSetting(settings);

            Dimcallupdate = false;
        }
        //dimScomboReSelect(curentDimsListIndex);

    }

    @Override
    public void dimScomboReSelect(int dimSelectedIndex, int activeDimState) {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            settings.setActiveDimIndex(dimSelectedIndex);
            settings.setActiveDimState(activeDimState);
            curentDimsListIndex = dimSelectedIndex;
            int y = settings.getDrawSettingS(x).getDrawingDimsByIndex(dimSelectedIndex).length;
            dimsPanel.getDimPanel().clear();

            for (int i = 0; i < y; i++) {
                dimsPanel.getDimPanel().add(new DimPanel(this));
//           System.out.println("i="+i+" y="+y+"\tdims i="+dimsPanel.getDimPanel().size() +"\t dim  i"+settings.getDrawSettingS(x).getDrawinGObject()[i].getDim()[0]);
                dimsPanel.getDimPanel().get(i).setdims(settings.getDrawSettingS(x).getDrawingDimsByIndex(dimSelectedIndex)[i].getDim());
                dimsPanel.getDimPanel().get(i).setFrame(settings.getDrawSettingS(x).getDrawingDimsByIndex(dimSelectedIndex)[i].getFrames());
                dimsPanel.getDimPanel().get(i).setOpacity(settings.getDrawSettingS(x).getDrawingDimsByIndex(dimSelectedIndex)[i].getopac());
//                             set   System.out.println("color1="+settings.getDrawSettingS(x).getDrawinGObject()[i].getTextC().getRGB()+" and set");
                dimsPanel.getDimPanel().get(i).setColor(settings.getDrawSettingS(x).getDrawingDimsByIndex(dimSelectedIndex)[i].getTextC());

                dimsPanel.getDimPanel().get(i).setStrokColor1(settings.getDrawSettingS(x).getDrawingDimsByIndex(dimSelectedIndex)[i].getStrokC());

            }

            dimsPanel.jTabbedPaneReset();
            updateUI();
            Dimcallupdate = false;
        }
    }

//    private void loadsettingfile() {
//        loadsetting = true;
//        JFileChooser chooser = new JFileChooser(new File("*.*"));
//        File f = new File(settings.getPath());
//        chooser.setCurrentDirectory(f);
//        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
//            {
//                loadsetting(chooser.getSelectedFile().getPath());
//                settings.setPath(chooser.getSelectedFile().getPath());
//                comboResets();
//            }
//        }
//
//        loadsetting = false;
//
//    }
    private void savesettingAs() {

        JFileChooser chooser = new JFileChooser(new File("*.json"));
        File f = new File(settings.getPath());
        chooser.setCurrentDirectory(f);
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            {
//                settings.setPath(chooser.getSelectedFile().getPath());
                saveSetting(chooser.getSelectedFile().getPath());
            }
        }
        loadsetting = false;

    }

    private void reSelectItem() {
        if (!loadsetting) {
//            setdrawImagevisall(false);            
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            //DimsPanel y = new  DimsPanel();
            if (x < 0) {
                x = 0;
            }
//            settings.setSelectedItem(x);
//        System.out.println("x="+x+"   4="+settings.getDrawSettingS(x)+"   parent="+settings.getDrawSettingS(x).getParent()+ "   sixe="+jComboBoxLinkItem.getItemCount());
            int parent = settings.getDrawSettingS(x).getParent();

            boolean b = newsha;
            setlinkParent(parent);
//            if (parent == 0) {
//                parent = x;
//            }
//           setdrawImagevisall(x);
            newsha = false;
//            dimsPanel.setImageVisible(settings.getDrawSettingS(x).isImagevisiblity());
//            dimsPanel.setTextVisible(settings.getDrawSettingS(x).isVisible());

            dimsPanel.setVisible(settings.getDrawSettingS(x).isVisible());
            dimsPanel.setIto(settings.getDrawSettingS(x).getIto());
            dimsPanel.setTextField1(settings.getDrawSettingS(x).getText1());
            dimsPanel.setAnimFrame(settings.getDrawSettingS(x).getSequencCount());
            dimsPanel.setAnimating(settings.getDrawSettingS(x).isImageSequency());
            dimsPanel.setAnimRate(settings.getDrawSettingS(x).getAnimateRate());
            dimsPanel.setSeqLoop(settings.getDrawSettingS(x).isSeqLoop());
            dimsPanel.setAnLoop(settings.getDrawSettingS(x).isAnLoop());
            dimsPanel.setImage(settings.getDrawSettingS(x).getImage());
            dimsPanel.setObject(settings.getDrawSettingS(x).getImage());
            dimsPanel.setAlign((settings.getDrawSettingS(x).getAlign() % 100) / 3, (settings.getDrawSettingS(x).getAlign() % 100) % 3, settings.getDrawSettingS(x).getAlign() / 100);
            dimsPanel.setfRes(settings.getDrawSettingS(x).getfRes());
            dimsPanel.setFmaxwide(settings.getDrawSettingS(x).getFmaxsizw());
            dimsPanel.setfSpacing(settings.getDrawSettingS(x).getFSpacing());
            
            dimsPanel.setcSize(settings.getDrawSettingS(x).getcSize());
            dimsPanel.setbeZierorLinear(settings.getDrawSettingS(x).getBezierLinear());

            dimsPanel.setTextbackvisible(settings.getDrawSettingS(x).isTextbackvisible());
            dimsPanel.setFont2(settings.getDrawSettingS(x).getFont2());
            dimsPanel.setfontPLain(true);
            dimsPanel.setfontBold(settings.getDrawSettingS(x).isFontBold());
            dimsPanel.setfontItalic(settings.getDrawSettingS(x).isFontItalic());

            dimsPanel.getDimPanel().clear();
            int dimslist = settings.getDrawSettingS(x).getDrawingDimsList().size();
            dimsPanel.setcombo(settings.getDrawSettingS(x).getDrawingDimsList());   //fill combo
            this.curentDimsListIndex = 0;
            settings.setActiveDimIndex(0);
            settings.setActiveDimState(0);

            int y = settings.getDrawSettingS(x).getDrawingDimsByIndex(0).length;
//            System.out.println("y=" + y);
            for (int i = 0; i < y; i++) {
                dimsPanel.getDimPanel().add(new DimPanel(this));
//          System.out.println("i="+i+" y="+y+"\tdims ="+dimsPanel.getDimPanel().size() );//
//                System.out.println("\t dim  i"+settings.getDrawSettingS(x).getDrawingDimsByIndex(0)[i].getDim()[0]);
                dimsPanel.getDimPanel().get(i).setdims(settings.getDrawSettingS(x).getDrawingDimsByIndex(0)[i].getDim());
                dimsPanel.getDimPanel().get(i).setFrame(settings.getDrawSettingS(x).getDrawingDimsByIndex(0)[i].getFrames());
                dimsPanel.getDimPanel().get(i).setOpacity(settings.getDrawSettingS(x).getDrawingDimsByIndex(0)[i].getopac());
//                             set   System.out.println("color1="+settings.getDrawSettingS(x).getDrawinGObject()[i].getTextC().getRGB()+" and set");
                dimsPanel.getDimPanel().get(i).setColor(settings.getDrawSettingS(x).getDrawingDimsByIndex(0)[i].getTextC());

                dimsPanel.getDimPanel().get(i).setStrokColor1(settings.getDrawSettingS(x).getDrawingDimsByIndex(0)[i].getStrokC());

                dimsPanel.redrawImage();
            }

            dimsPanel.jTabbedPaneReset();
            newsha = b;

            updateUI();
            Dimcallupdate = false;
//            sendSetting(settings);
        }
    }

    private void comboResets() {
        boolean n = newsha;
        newsha = false;
        int index = settings.getSelectedItem();
        jComboBoxItems.removeAllItems();
//                 System.out.println("2="+settings.getSelectedItem());
        jComboBoxLinkItem.removeAllItems();
//                 System.out.println("3="+settings.getSelectedItem());
        jComboBoxLinkItem.addItem("NO Link");
//                 System.out.println("3="+settings.getSelectedItem());
        for (int i = 0; i < jComboBoxItems.getActionListeners().length; i++) {
            jComboBoxItems.removeActionListener(jComboBoxItems.getActionListeners()[i]);
        }
        for (int i = 0; i < jComboBoxLinkItem.getActionListeners().length; i++) {
            jComboBoxLinkItem.removeActionListener(jComboBoxLinkItem.getActionListeners()[i]);
        }
        jComboBoxItems.addItem("Screen0  " + settings.getDrawSettingS(0).getText1());
        for (int i = 1; i < settings.getDrawSettingS().size(); i++) {
            jComboBoxItems.addItem(settings.getDrawSettingS(i).getId() + "->" + settings.getDrawSettingS(i).getText1());
            jComboBoxLinkItem.addItem(settings.getDrawSettingS(i).getId() + "->" + settings.getDrawSettingS(i).getText1());
        }

//        System.out.println("4="+settings.getSelectedItem());
        jComboBoxItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemsActionPerformed(evt);
            }
        });
        jComboBoxLinkItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLinkItemActionPerformed(evt);
            }
        });
        newsha = n;
//        settings.setSelectedItem(index);
//System.out.println("5="+settings.getSelectedItem());
        if (!loadsetting && newsha) {
            updateSetting();
        }
    }

    private void linkSet(int linkNew) {
        int selectItem = jComboBoxItems.getSelectedIndex();
        if (selectItem < 0 || linkNew >= settings.getDrawSettingS().size()) {
//            System.out.println("Thanks to use this Program , Mokhtari/Ranjbar");
        } else {
            int linkOld = settings.getDrawSettingS(selectItem).getParent();
            settings.getDrawSettingS(selectItem).setParent(settings.getDrawSettingS(linkNew).getId());

//            if (linkNew > 0) {
//                if (!settings.getDrawSettingS(linkNew).getChilds().contains(linkNew)) {
//                    settings.getDrawSettingS(linkNew).addChild(linkNew);
//                }
//            }
//            if (linkOld > 0) {
//                settings.getDrawSettingS(linkOld).removeChild(selectItem);
////            reCalDimByLink(selectItem, linkOld, linkNew);
//            }
        }
    }

    private void reCalDimByLink(int selectItem, int linkOld, int linkNew) {
        for (int k = 0; k < settings.getDrawSettingS(selectItem).getDrawingDimsList().size(); k++) {
            curentDimsListIndex = k;
            int dimCountAll = settings.getDrawSettingS(selectItem).getDrawingDimsByIndex(curentDimsListIndex).length;
            float dimOld[] = new float[4], link1[] = new float[4], link2[] = new float[4], dimnew[] = new float[4];
            link1[0] = 0;
            link1[1] = 0;
            link1[2] = 1000;
            link1[3] = 1000;
            link2[0] = 0;
            link2[1] = 0;
            link2[2] = 1000;
            link2[3] = 1000;

            for (int i = 0; i < dimCountAll; i++) {
                dimOld = settings.getDrawSettingS(selectItem).getDrawingDimsByIndex(curentDimsListIndex)[i].getDim();
                if (linkOld > 1) {
                    int Link_oldDimsUse = 0;
                    if (settings.getDrawSettingS(linkOld - 1).getDrawingDimsByIndex(curentDimsListIndex).length > i) {
                        Link_oldDimsUse = i;
                    }
                    link1 = settings.getDrawSettingS(linkOld - 1).getDrawingDimsByIndex(curentDimsListIndex)[Link_oldDimsUse].getDim();
                }
                if (linkNew > 1) {
                    int LinkNewDimsUse = 0;
                    if (settings.getDrawSettingS(linkNew - 1).getDrawingDimsByIndex(curentDimsListIndex).length > i) {
                        LinkNewDimsUse = i;
                    }
                    link2 = settings.getDrawSettingS(linkNew - 1).getDrawingDimsByIndex(curentDimsListIndex)[LinkNewDimsUse].getDim();
                    if (link2[2] == 0 | link2[3] == 0) {
                        link2[2] = 1000;
                        link2[3] = 1000;
                    }
                }
                //position 
                dimnew[0] = (dimOld[0] * link1[2] / 1000 + link1[0] - link2[0]) * 1000 / (link2[2]);
                dimnew[1] = (dimOld[1] * link1[3] / 1000 + link1[1] - link2[1]) * 1000 / (link2[3]);
                // size 
                dimnew[2] = dimOld[2] * link1[2] / link2[2];
                dimnew[3] = dimOld[3] * link1[3] / link2[3];

                dimsPanel.getDimPanel().get(i).setdims(dimnew);
                settings.getDrawSettingS(selectItem).getDrawingDimsByIndex(curentDimsListIndex)[i].setDim(dimnew);
            }

        }
    }

    private void updateSettingFromDim() {
        int x = jComboBoxItems.getSelectedIndex();
        List<DataPackSettingsdrawingDimsList> dataPackDimsLists;
        dataPackDimsLists = new LinkedList<DataPackSettingsdrawingDimsList>();
        //put to datapacak
        DataPackSettingsdrawingDimsList dataPackSettingsdrawingDimsList = new DataPackSettingsdrawingDimsList(settings.getDrawSettingS(x).getId());

        int xx = dimsPanel.getito();
        dataPackSettingsdrawingDimsList.setIto(xx);
        //  System.out.println("990210-  :"+settings.getDrawSettingS(x).getDrawingDimsList().size());
        dataPackSettingsdrawingDimsList.setDrawingDimsList(settings.getDrawSettingS(x).getDrawingDimsList());

//        settings.getDrawSettingS(x).setText1(dimsPanel.getTextField1());
//        if (xx == 2) {
//            settings.getDrawSettingS(x).setImage(dimsPanel.getObject());
//        } else {
//            settings.getDrawSettingS(x).setImage(dimsPanel.imagePanel.getAddress());
//        }
//        settings.getDrawSettingS(x).setImageSequency(dimsPanel.isanimating());
//        settings.getDrawSettingS(x).setSeqLoop(dimsPanel.isSeqLoop());
//        settings.getDrawSettingS(x).setAnLoop(dimsPanel.isAnLoop());
//        settings.getDrawSettingS(x).setAnimateRate(dimsPanel.getAnimRate());
//        settings.getDrawSettingS(x).setSequencCount(dimsPanel.getAnimFrame());
//        settings.getDrawSettingS(x).setAlign(dimsPanel.getAlign());//_Lefttoright() * 100 + dimsPanel.getAlignH() * 3 + dimsPanel.getAlignV());
//        settings.getDrawSettingS(x).setfRes(dimsPanel.getfRes());
//        settings.getDrawSettingS(x).setFmaxsizw(dimsPanel.getFmaxwide());
//        settings.getDrawSettingS(x).setcSize(dimsPanel.getcSize());
//        settings.getDrawSettingS(x).setTextbackvisible(dimsPanel.isTextbackvisible());
//        settings.getDrawSettingS(x).setBezierLinear(dimsPanel.getbeZierorLinear());
//
//        settings.getDrawSettingS(x).setFont2(dimsPanel.getFont2());
//        settings.getDrawSettingS(x).setFontBold(dimsPanel.isfontBold());
//        settings.getDrawSettingS(x).setFontItalic(dimsPanel.isfontItalic());
        int dims = dimsPanel.dimPanel.size();

//        dataPackSettingsdrawingDimsList.setDrawinGObject(curentDimsListIndex, dims,settings.getActiveDimIndex(),settings.getActiveDimState());
        dataPackSettingsdrawingDimsList.setDim1(dimsPanel.getactiveDimIndex());
        dataPackSettingsdrawingDimsList.setDim2(dimsPanel.getActiveDimState());
//        for (int i = 0; i < dims; i++) {
//
//           dataPackSettingsdrawingDimsList.getDrawingDimsList().get(curentDimsListIndex)[i].setDim(dimsPanel.dimPanel.get(i).getdims());
//            dataPackSettingsdrawingDimsList.getDrawingDimsList().get(curentDimsListIndex)[i].setOpac(dimsPanel.dimPanel.get(i).getOpacity());
//            dataPackSettingsdrawingDimsList.getDrawingDimsList().get(curentDimsListIndex)[i].setFrames(dimsPanel.dimPanel.get(i).getFrame());
//             dataPackSettingsdrawingDimsList.getDrawingDimsList().get(curentDimsListIndex)[i].setTextC(dimsPanel.dimPanel.get(i).getColor1());
//             dataPackSettingsdrawingDimsList.getDrawingDimsList().get(curentDimsListIndex)[i].setStrokC(dimsPanel.dimPanel.get(i).getStrokColor1());
//        }

        //   updatescreen(false);
        //   settingupdate();
        controll.getControolPack().getDataPackSettingsdrawingDimsLists().add(dataPackSettingsdrawingDimsList);
        controll.saveControolPack();
        controll.SendControolPack();

    }

    private void updateSettingFromDimAll() {
        int x = jComboBoxItems.getSelectedIndex();
        settings.setSelectedItem(x);
        settings.setActiveDimState(dimsPanel.getActiveDimState());

        settings.getDrawSettingS(x).setParent(settings.getDrawSettingS(jComboBoxLinkItem.getSelectedIndex()).getId());

        int xx = dimsPanel.getito();
        settings.getDrawSettingS(x).setIto(xx);
//        settings.getDrawSettingS(x).setImagevisiblity(dimsPanel.isImageVisible());
//        settings.getDrawSettingS(x).setVisiblity(dimsPanel.isTextVisible());
        settings.getDrawSettingS(x).setText1(dimsPanel.getTextField1());
        settings.getDrawSettingS(x).setVisiblity(dimsPanel.IsVisible());

        if (xx == 2) {
            settings.getDrawSettingS(x).setImage(dimsPanel.getObject());
        } else {
            settings.getDrawSettingS(x).setImage(dimsPanel.imagePanel.getAddress());
        }
        settings.getDrawSettingS(x).setImageSequency(dimsPanel.isanimating());
        settings.getDrawSettingS(x).setSeqLoop(dimsPanel.isSeqLoop());
        settings.getDrawSettingS(x).setAnLoop(dimsPanel.isAnLoop());
        settings.getDrawSettingS(x).setAnimateRate(dimsPanel.getAnimRate());
        settings.getDrawSettingS(x).setSequencCount(dimsPanel.getAnimFrame());
        settings.getDrawSettingS(x).setAlign(dimsPanel.getAlign());//_Lefttoright() * 100 + dimsPanel.getAlignH() * 3 + dimsPanel.getAlignV());
        settings.getDrawSettingS(x).setfRes(dimsPanel.getfRes());
        settings.getDrawSettingS(x).setFmaxsizw(dimsPanel.getFmaxwide());
        settings.getDrawSettingS(x).setcSize(dimsPanel.getcSize());
          settings.getDrawSettingS(x).setFSpacing(dimsPanel.getfSpacing());
        settings.getDrawSettingS(x).setTextbackvisible(dimsPanel.isTextbackvisible());
        settings.getDrawSettingS(x).setBezierLinear(dimsPanel.getbeZierorLinear());

//        settings.getDrawSettingS(x).setAlignV(dimsPanel.getAlignV());
        settings.getDrawSettingS(x).setFont2(dimsPanel.getFont2());
        settings.getDrawSettingS(x).setFontBold(dimsPanel.isfontBold());
        settings.getDrawSettingS(x).setFontItalic(dimsPanel.isfontItalic());
        int dims = dimsPanel.dimPanel.size();
        settings.getDrawSettingS(x).setDrawinGObject(curentDimsListIndex, dims);

        for (int i = 0; i < dims; i++) {
//        int i = settings.getSelecteddim();
            settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[i].setDim(dimsPanel.dimPanel.get(i).getdims());
            settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[i].setOpac(dimsPanel.dimPanel.get(i).getOpacity());
            settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[i].setFrames(dimsPanel.dimPanel.get(i).getFrame());
            settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[i].setTextC(dimsPanel.dimPanel.get(i).getColor1());
            settings.getDrawSettingS(x).getDrawingDimsByIndex(curentDimsListIndex)[i].setStrokC(dimsPanel.dimPanel.get(i).getStrokColor1());
        }

        updatescreen(false);

    }

    void sendSetting(SettingPack settings) {
//        sendSetting(new FileManipulat().loadSetting("DefaultSetting1.json", server.getobjecsArrayLenght()));
        if (!loadsetting) {
            server.setServerFREEe(true);
            server.writeSocket(new Pack(settings));
            server.setSettingPack(settings);
        }
    }

    public void sendSetting() {
        sendSetting(settings);
    }

    private void initAllsettings() {
        int x = jComboBoxItems.getSelectedIndex();
        comboResets();
        jComboBoxItems.setSelectedIndex(x);
//        sendSetting(new FileManipulat().loadSetting("DefaultSetting1.json", server.getobjecsArrayLenght()));
//        sendSetting(new FileManipulat().loadSetting("DefaultSetting2.json", server.getobjecsArrayLenght()));
//        sendSetting(new FileManipulat().loadSetting("DefaultSetting3.json", server.getobjecsArrayLenght()));
//        sendSetting(new FileManipulat().loadSetting("DefaultSetting4.json", server.getobjecsArrayLenght()));
    }

    private void hideallTextandImages() {

//        for (int i = 0; i < settings.getDrawSettingS().size(); i++) {
//            if (settings.getDrawSettingS(i).getParent() == 0) {
//                settings.getDrawSettingS(i).setVisiblity(false);
//            }
//        }
        sendSetting(settings);
    }

    private void checkvisibility() {
        boolean t;
        int id, oldid;
        for (int i = 0; i < settings.getDrawSettingS().size(); i++) {
            id = i;
            while (settings.getDrawSettingS(id).getParent() > 0) {
                oldid = id;
                for (int j = 0; j < settings.getDrawSettingS().size(); j++) {
                    if (settings.getDrawSettingS(id).getParent() == settings.getDrawSettingS(j).getId()) {
                        id = j;
                    }
                    break;
                }
                if (id == oldid) {
                    return;
                }
            }
            if (settings.getDrawSettingS(id).getParent() == 0) {
                controolPack.addVis_Anim_Bool(settings.getDrawSettingS(i).getId(), (settings.getDrawSettingS(i).isVisible() && settings.getDrawSettingS(settings.getDrawSettingS(id).getParent()).isVisible()));
            }
        }

    }

    private void copy_n(int number) {
        updateSettingFromDim();

        String text1;
        String image;
        boolean imagevisiblity;
        boolean textvisiblity;
        int ito;  // image text object

//        
        int d0;
        int startitem = jComboBoxItems.getSelectedIndex();
        boolean imageis = jCheckBoximageVis.isSelected(), textvis = jCheckBoxtextVis.isSelected();
        String st = settings.getDrawSettingS(startitem).getText1();
        String st2 = settings.getDrawSettingS(startitem).getImage();

        for (int i = 1; i < number; i++) {
            List<DrawSettingDims[]> dim0 = settings.getDrawSettingS(startitem).getDrawingDimsListCopy();

            d0 = startitem + i;
            //            d1 = startitem + 3 + 2 * i;
            settings.getDrawSettingS(d0).setDrawingDimsList(dim0);

            settings.getDrawSettingS(d0).setVisiblity(settings.getDrawSettingS(startitem).isVisible());
            settings.getDrawSettingS(d0).setParent(settings.getDrawSettingS(startitem).getParent());
            settings.getDrawSettingS(d0).setFont2(settings.getDrawSettingS(startitem).getFont2());
            settings.getDrawSettingS(d0).setImagevisiblity(imageis);
            settings.getDrawSettingS(d0).setVisiblity(textvis);
            settings.getDrawSettingS(d0).setText1(st);//String.valueOf((char)(x-startitem + st.charAt(0))));//String.valueOf(x-startitem)
            settings.getDrawSettingS(d0).setImage(st2);
            settings.getDrawSettingS(d0).setImageSequency(dimsPanel.isanimating());
            settings.getDrawSettingS(d0).setSeqLoop(dimsPanel.isSeqLoop());
            settings.getDrawSettingS(d0).setSequencCount(dimsPanel.getAnimFrame());
            settings.getDrawSettingS(d0).setAnimateRate(dimsPanel.getAnimRate());
            settings.getDrawSettingS(d0).setAlign(dimsPanel.getAlign());

//int cSize = 40;//0=left 1- middele 2:right Allignment Vertically
            settings.getDrawSettingS(d0).setcSize(dimsPanel.getcSize());
//int fRes = 40;
            settings.getDrawSettingS(d0).setfRes(dimsPanel.getfRes());
             settings.getDrawSettingS(d0).setFSpacing(dimsPanel.getfSpacing());
//int fmax=100;
            settings.getDrawSettingS(d0).setFmaxsizw(dimsPanel.getFmaxwide());

            settings.getDrawSettingS(d0).setFontBold(dimsPanel.isfontBold());
            settings.getDrawSettingS(d0).setFontItalic(dimsPanel.isfontItalic());
            settings.getDrawSettingS(d0).setTextbackvisible(dimsPanel.isTextbackvisible());
            settings.getDrawSettingS(d0).setBezierLinear(dimsPanel.getbeZierorLinear());

        }
        sendSetting();
    }

    private void addnumberstocurrentalldims() {
        updateSettingFromDim();
        float dpos[] = {(float) 0.0, (float) 0.0, (float) 0.0};
        float dAngle[] = {(float) 0.0, (float) 0.0, (float) 0.0};
        float dscale[] = {(float) 1.0, (float) 1.0, (float) 1.0};
        dpos[0] = (float) jSpinnerx5.getValue();
        dpos[1] = (float) jSpinnery5.getValue();
        dpos[2] = (float) jSpinnerz5.getValue();
        dscale[0] = (float) jSpinnerScalex1.getValue();
        dscale[1] = (float) jSpinnerScaley1.getValue();
        dscale[2] = (float) jSpinnerScalez1.getValue();
        dAngle[0] = (float) jSpinnerAnglex1.getValue();
        dAngle[1] = (float) jSpinnerAngley1.getValue();
        dAngle[2] = (float) jSpinnerAnglez.getValue();

//        int x2 = (int) jSpinnerx2.getValue();
//        int x3 = Integer.parseInt(jSpinnerx3.getValue().toString());
        int startitem = jComboBoxItems.getSelectedIndex();
        // int x;
        List<DrawSettingDims[]> dim0 = settings.getDrawSettingS(startitem).getDrawingDimsListCopy();
        for (int i = 0; i < dim0.size(); i++) {
            for (int j = 0; j < dim0.get(i).length; j++) {
                for (int k = 0; k < 3; k++) {
                    dim0.get(i)[j].setPos(k, dim0.get(i)[j].getPos(k) + dpos[k]);
                    dim0.get(i)[j].setAngle(k, dim0.get(i)[j].getAngle(k) + dAngle[k]);
                    dim0.get(i)[j].setScale(k, dim0.get(i)[j].getScale(k) * dscale[k]);
                }
            }
        }

        settings.getDrawSettingS(startitem).setDrawingDimsList(dim0);
//        }
        sendSetting();
    }

    private void copyn_dx_frame() {
        updateSettingFromDim();

        int x2 = (int) jSpinnerx2.getValue();
        int x3 = Integer.parseInt(jSpinnerx3.getValue().toString());
        int x4 = (int) jSpinnerx4.getValue();
//        int copyN = (int) jSpinnerCOPYN.getValue();

        float dpos[] = {(float) 0.0, (float) 0.0, (float) 0.0};
        float dAngle[] = {(float) 0.0, (float) 0.0, (float) 0.0};
        float dscale[] = {(float) 1.0, (float) 1.0, (float) 1.0};
        dpos[0] = (float) jSpinnerx5.getValue();
        dpos[1] = (float) jSpinnery5.getValue();
        dpos[2] = (float) jSpinnerz5.getValue();
        dscale[0] = (float) jSpinnerScalex1.getValue();
        dscale[1] = (float) jSpinnerScaley1.getValue();
        dscale[2] = (float) jSpinnerScalez1.getValue();
        dAngle[0] = (float) jSpinnerAnglex1.getValue();
        dAngle[1] = (float) jSpinnerAngley1.getValue();
        dAngle[2] = (float) jSpinnerAnglez.getValue();

//        String text1;
//        String image;
//        boolean imagevisiblity;
//        boolean textvisiblity;
//        int ito;  // image text object
//        
        int startitem = jComboBoxItems.getSelectedIndex();
        int d0 = startitem;
//        boolean imageis = jCheckBoximageVis.isSelected(), textvis = jCheckBoxtextVis.isSelected();
        String st = settings.getDrawSettingS(startitem).getText1();
        String st2 = settings.getDrawSettingS(startitem).getImage();

//        int x;
        for (int m = 1; m < x2; m++) {
            for (int k = 0; k < x3; k++) {
////            DrawSettingS dr = new DrawSettingS();
//                List<DrawSettingDims[]> dim0 = settings.getDrawSettingS(startitem + k).getDrawingDimsListCopy();
                List<DrawSettingDims[]> dim0 = settings.getDrawSettingS(startitem + k).getDrawingDimsListCopy();
//
                if (k == 0) {
                    for (int i = 0; i < dim0.size(); i++) {
                        for (int j = 0; j < dim0.get(i).length; j++) {
                            for (int p = 0; p < 3; p++) {
                                dim0.get(i)[j].setPos(p, dim0.get(i)[j].getPos(p) + dpos[p] * m);
                                dim0.get(i)[j].setAngle(p, dim0.get(i)[j].getAngle(p) + dAngle[p] * m);
                                dim0.get(i)[j].setScale(p, dim0.get(i)[j].getScale(p) * (dscale[p] + (m * (1 - dscale[p]))));
                            }
                        }
                    }
                }

//                if (dim0.get(1).length < 2) {
//                    System.out.println("970408-startitem + k=" + startitem + k);
//                }
//                dim0.get(1)[0].setFrames(dim0.get(1)[0].getFrames() + x4 * m);
//
////                dim0.get(1)[2].setFrames(f2[m]);
////                dim0.get(2)[0].setFrames(f3[m]);
////                dim0.get(2)[1].setFrames(f2[m]);
                d0 = startitem + (x3 * m) + k;
                if (d0 < 3) {
                    return;
                }

                settings.getDrawSettingS().add(d0, new DrawSettingS(settings.getLastID()));

                settings.getDrawSettingS(d0).setDrawingDimsList(dim0);
                settings.getDrawSettingS(d0).setVisiblity(settings.getDrawSettingS(startitem + k).isVisible());
                settings.getDrawSettingS(d0).setParent(settings.getDrawSettingS(startitem + k).getParent());
                settings.getDrawSettingS(d0).setFont2(settings.getDrawSettingS(startitem + k).getFont2());
                settings.getDrawSettingS(d0).setIto(settings.getDrawSettingS(startitem + k).getIto());
//            settings.getDrawSettingS(d0).setImagevisiblity(imageis);
//            settings.getDrawSettingS(d0).setVisiblity(textvis);
                settings.getDrawSettingS(d0).setText1(settings.getDrawSettingS(startitem + k).getText1());//String.valueOf((char)(x-startitem + st.charAt(0))));//String.valueOf(x-startitem + k)
                settings.getDrawSettingS(d0).setImage(settings.getDrawSettingS(startitem + k).getImage());
                settings.getDrawSettingS(d0).setImageSequency(settings.getDrawSettingS(startitem + k).isImageSequency());  // is animating
                settings.getDrawSettingS(d0).setSeqLoop(settings.getDrawSettingS(startitem + k).isSeqLoop());
                settings.getDrawSettingS(d0).setSequencCount(settings.getDrawSettingS(startitem + k).getSequencCount());
                settings.getDrawSettingS(d0).setAnimateRate(settings.getDrawSettingS(startitem + k).getAnimateRate());
                settings.getDrawSettingS(d0).setAlign(settings.getDrawSettingS(startitem + k).getAlign());
//int cSize = 40;//0=left 1- middele 2:right Allignment Vertically
                settings.getDrawSettingS(d0).setcSize(settings.getDrawSettingS(startitem + k).getcSize());
//int fRes = 40;
                settings.getDrawSettingS(d0).setfRes(settings.getDrawSettingS(startitem + k).getfRes());
                 settings.getDrawSettingS(d0).setFSpacing(settings.getDrawSettingS(startitem + k).getFSpacing());
//int fmax=100;
                settings.getDrawSettingS(d0).setFmaxsizw(settings.getDrawSettingS(startitem + k).getFmaxsizw());

                settings.getDrawSettingS(d0).setFontBold(settings.getDrawSettingS(startitem + k).isFontBold());
                settings.getDrawSettingS(d0).setFontItalic(settings.getDrawSettingS(startitem + k).isFontItalic());
                settings.getDrawSettingS(d0).setTextbackvisible(settings.getDrawSettingS(startitem + k).isTextbackvisible());
                settings.getDrawSettingS(d0).setBezierLinear(settings.getDrawSettingS(startitem + k).getBezierLinear());

//                settings.getDrawSettingS(x).setFont2(settings.getDrawSettingS(startitem  + k).getFont2());
//                settings.getDrawSettingS(x).setDrawingDimsList(dim0);
//                settings.getDrawSettingS(x).setParent(settings.getDrawSettingS(startitem + k).getParent());
//                settings.getDrawSettingS(x).setImagevisiblity(settings.getDrawSettingS(startitem + k).isImagevisiblity());
//                settings.getDrawSettingS(x).setVisiblity(settings.getDrawSettingS(startitem + k).isVisible());
//                settings.getDrawSettingS(x).setText1(settings.getDrawSettingS(startitem + k).getText1());//String.valueOf((char)(x-startitem + st.charAt(0))));//String.valueOf(x-startitem)
//                settings.getDrawSettingS(x).setImage(settings.getDrawSettingS(startitem + k).getImage());
//                settings.getDrawSettingS(x).setImageSequency(settings.getDrawSettingS(startitem + k).isImageSequency());
//                settings.getDrawSettingS(x).setSeqLoop(settings.getDrawSettingS(startitem + k).isSeqLoop());
//                settings.getDrawSettingS(x).setSequencCount(settings.getDrawSettingS(startitem + k).getSequencCount());
//                settings.getDrawSettingS(x).setAlign(settings.getDrawSettingS(startitem + k).getAlign());
//
////                System.out.print("\t-xis=" + x);
            }
////            System.out.println("\t970329-next");
        }
//
        boolean b = newsha;
        newsha = false;
        init1();
        newsha = b;
        jComboBoxItems.setSelectedIndex(d0);
        sendSetting();
    }

    @Override
    public void ItemDelete() {
        int selected = jComboBoxItems.getSelectedIndex();
        for (int i = 0; i < settings.getDrawSettingS().size(); i++) {
            if (settings.getDrawSettingS(i).getParent() == selected) {
                settings.getDrawSettingS(i).setParent(0);
            }
        }
        settings.getDrawSettingS().remove(selected);
        newsha = false;
        init1();
        newsha = true;
        jComboBoxItems.setSelectedIndex(selected - 1);
    }

    @Override
    public void ItemAdd() {
        int selected = jComboBoxItems.getSelectedIndex();
//        System.out.println("b980218- before settingsize="+ settings.getDrawSettingS().size());
        settings.getDrawSettingS().add(selected + 1, new DrawSettingS(settings.getLastID()));
//        System.out.println("980218-settingsize="+ settings.getDrawSettingS().size());
        newsha = false;
        init1();
        newsha = true;
        jComboBoxItems.setSelectedIndex(selected + 1);

    }

    @Override
    public void ItemDup() {
        int selected = jComboBoxItems.getSelectedIndex();
//        System.out.println("b980218- before settingsize="+ settings.getDrawSettingS().size());
        settings.getDrawSettingS().add(selected + 1, new DrawSettingS(settings.getLastID()));
        copy_n(2);
        boolean b = newsha;
        newsha = false;
        init1();
        newsha = b;
        jComboBoxItems.setSelectedIndex(selected + 1);
    }

    List<DrawSettingDims[]> drawcopy;

    @Override
    public void Itemcopy(DimsPanel aThis) {
        drawcopy = settings.getDrawSettingS(jComboBoxItems.getSelectedIndex()).getDrawingDimsListCopy();
    }

    @Override
    public void ItemPaste() {
        if (drawcopy != null) {
            settings.getDrawSettingS(jComboBoxItems.getSelectedIndex()).setDrawSettings(drawcopy);
        }
    }

    @Override
    public boolean isNewsha() {
        return newsha;
    }

    @Override
    public void setNewsha(boolean newsha) {
        this.newsha = newsha;
    }

    private void updatescreen(boolean send) {
        if (newsha) {
            int[] x = new int[4];
            x[0] = (int) jSpinnerx.getValue();
            x[1] = (int) (jSpinnery.getValue());
            x[2] = (int) (jSpinnerScalex.getValue());
            x[3] = (int) (jSpinnerScaley.getValue());
            settings.setScreenDim(x);
            if (send) {
                sendSetting();
            }
        }
    }

    private void updateCamera(boolean send) {
        if (newsha) {
            float[] x = new float[13];
            x[0] = (float) jSpinnerx6.getValue();
            x[1] = (float) jSpinnery6.getValue();
            x[2] = (float) jSpinnerz6.getValue();
            x[3] = (float) jSpinnerScalex3.getValue();
            x[4] = (float) jSpinnerScaley3.getValue();
            x[5] = (float) jSpinnerScalez3.getValue();
            x[6] = (float) jSpinnerAnglex2.getValue();
            x[7] = (float) jSpinnerAngley2.getValue();
            x[8] = (float) jSpinnerAnglez2.getValue();

            x[9] = (float) jSpinnercam_1.getValue();
            x[10] = (float) jSpinnercam_2.getValue();
            x[11] = (float) jSpinnercam_3.getValue();
            x[12] = (float) jSpinnercam_4.getValue();

            settings.setCamera(x);
            if (send) {
                sendSetting();
            }
        }
    }

    public void addtotab(String st, JPanel settings) {
        jTabbedPane2.add(st, settings);
    }

    public void sendexit() {
        settings.setExit(13);
        sendSetting();
        settings.setExit(0);
    }

    private void setlinkParent(int parent) {
//    System.out.println("990215- parent="+parent);
        int index = 0;
        if (parent > 0) {

            for (int i = 0; i < settings.getDrawSettingS().size(); i++) {
                if (settings.getDrawSettingS(i).getId() == parent) {
                    index = i;
                    break;
                }
            }
        }
        {
            jComboBoxLinkItem.setSelectedIndex(index);
        }
    }

    private void resetId() {
        int id, idtemp;
        for (int i = 0; i < settings.getDrawSettingS().size(); i++) {

            id = settings.getDrawSettingS(i).getId();
            if (id == i) {
                System.out.println("   990220   i="+i);
                continue;
               
            }

            for (int j = i; j < settings.getDrawSettingS().size(); j++) {
                if (i == settings.getDrawSettingS(j).getId()) {
                    settings.getDrawSettingS(j).setId(settings.getLastID());
                    for (int k = 0; k < settings.getDrawSettingS().size(); k++) {
                        if (settings.getDrawSettingS(k).getParent() == i) {
                            settings.getDrawSettingS(k).setParent(settings.getDrawSettingS(j).getId());
                        }
                    }
                }

            }

            settings.getDrawSettingS(i).setId(i);
            for (int k = 0; k < settings.getDrawSettingS().size(); k++) {
                if (settings.getDrawSettingS(k).getParent() == id) {
                    settings.getDrawSettingS(k).setParent(i);
                }
            }     
        }
        settings.setLastIDEnd();
        initAllsettings();
    }

    private void loadfromsetting() {
       if (newsha){
            loadsetting = true;
        JFileChooser chooser = new JFileChooser(new File("*.*"));
        File f = new File(settings.getPath());
        chooser.setCurrentDirectory(f);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            
                settings = new FileManipulat().loadSetting(chooser.getSelectedFile().getPath());
                settings.setPath(chooser.getSelectedFile().getPath());
                comboResets();
                   sendSetting();
                
         }

        loadsetting = false;
       }
    }

    private void repairLineSpacing() {
        for (int i = 0; i < settings.getDrawSettingS().size(); i++) {
            settings.getDrawSettingS(i).setfRes(settings.getDrawSettingS(i).getfRes());
            settings.getDrawSettingS(i).setFmaxsizw(settings.getDrawSettingS(i).getFmaxsizw());
            settings.getDrawSettingS(i).setcSize(settings.getDrawSettingS(i).getcSize());
        }
    }
}
